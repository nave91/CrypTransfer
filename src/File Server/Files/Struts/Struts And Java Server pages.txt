[18-Sep-2002] JavaServer Faces (JSF) is being developed as JSR 127 under the Java Community Process, with the goal of creating a standard framework for user interface components to be used in web applications. Included will be the following basic features: 

User interface component model 
Event handling model 
Validation framework 
Flexible rendering model (plugin support for rendering different kinds of HTML, or different markup languages and technologies) 
A standard RenderKit (and associated Renderers) for generating basic HTML/4.01 markup. This library is primarily for making JSF useful out of the box, and allow apps to be portable across JSF implementations. However, we expect a lot of innovation in this area among competing JSF implementations. 
All of the above functionality is available via standard Java APIs, and is thus not tied to JavaServer Pages (JSP). However, because a large majority of JSF users will also be using JSP, an additional set of requirements is included in the JSF specification, including: 

A standard tag library for generic things that are independent of the specific RenderKit in use (such as adding a validator to a component). 
A standard tag library for the basic HTML RenderKit, with a tag for each combination of a component type and a method of rendering that component type. An example will make this clearer -- consider the UISelectOne component, which represents a list of options, and allows only a single option from the list to be selected. Such a component can be rendered in three different ways (in the basic HTML RenderKit), each with a different Renderer and a corresponding custom tag:

<h:selectone_listbox> - Display a list of all the possible options (expanding the box to include all of them so that no scrollbar is required).

<h:selectone_menu> - Display as a combo box (the traditional HTML <select> element with size="1").

<h:selectone_radio> - Display as a set of radio buttons and corresponding labels. 
Note that the application developer doesn't know or care which mechanism was used to display this component -- that's up to the page author, who will pick the desired representation by virtue of which tag he or she selects (at the Java API level, you make this choice by setting the "rendererType" property on the component instance). This is one of the many advances that JSF provides over Struts tags, where there is one and only one way to render each individual element. 

There are also provisions for creating more complex components like grids, tree controls, and the like -- a common theme you will see is "compose complex things out of little things" -- that is accomplished in JSP by nesting component tags inside each other, just like you nest HTML <input> elements inside a <form> element. 

For more information about JavaServer Faces, and an early access draft of the specification (and an early access version of the RI that corresponds to an even earlier draft of the spec), you'll want to bookmark: 

http://java.sun.com/j2ee/javaserverfaces/ 

In addition, there is a forum on the Java Developer Connection (free registration required) focused on JavaServer Faces, so please ask your general Faces-related questions there instead of here. Here's a direct link to the forum page: 

http://forums.java.sun.com/forum.jsp?forum=427 

Note that JavaServer Faces depends on Servlet 2.3 and JSP 1.2 (i.e. J2EE 1.3 containers). 



Struts architecture as one that follows MVC pattern
Unified error handling programmatically and declaratively
<font color="green">www.pjug.com</font>